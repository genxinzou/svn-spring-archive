/*-Xms256m -Xmx512m
 * CLoginPanel.java
 *
 * Created on 23 May 2006, 18:47
 */
package aflobby;

import aflobby.UI.CUserSettings;
import aflobby.UI.CView;
import aflobby.protocol.tasserver.CTASServerProtocol;
import java.awt.event.KeyEvent;
import javax.swing.SwingUtilities;
import org.jvnet.lafwidget.LafWidget;
import org.jvnet.lafwidget.text.PasswordStrengthChecker;
import org.jvnet.lafwidget.utils.LafConstants.PasswordStrength;

class LoginTask extends Thread {

    public LMain LM;
    public String username;
    public String password;
    public String server;
    public int port;
    CChannelView CV;
    CLoginProgress lp;
    public boolean sha=false;

    LoginTask(LMain L,boolean sha_hash) {
        LM = L;
        sha = sha_hash;
    }

    @Override
    public void run() {
        
        if (!Main.chat_only_mode) {
            String s = CUserSettings.GetValue("springpath", "");
            if(s.equals("")==false){
                CSync.Setup(LM);
            }
        }
        
        CEvent e = new CEvent(CEvent.LOGINPROGRESS + " " + java.util.ResourceBundle.getBundle("aflobby/languages").getString("CLoginTask._75_Connecting"));
        LM.core.NewGUIEvent(e);

        CV = new CChannelView(LM);
        LM.AddView(CV, false);

        if (LM.protocol.Connect(server, port)) {
            CEvent e2 = new CEvent(CEvent.LOGINPROGRESS + " 78 Connected, Logging in");
            LM.core.NewGUIEvent(e2);
            LM.protocol.Login(username, password,sha);
        } else {
            //LM.Toasts.AddMessage("error could not connect");
            CEvent e2 = new CEvent(CEvent.FAILEDCONNECTION);
            LM.core.NewEvent(e2);
            LM.RemoveView(CV);
        }
    }
}

/**
 *
 * @author  AF
 */
public class CLoginPanel extends CView {

    //public CConnection jc;

    public CLoginPanel(LMain L) {
        LM = L;
        setTitle("LoginPanel");
        Initialize();
        ValidatePanel();
    }

    /**
     * Creates new form CLoginPanel
     */
    @Override
    public void Initialize() {
        initComponents();
        UserTitle = java.util.ResourceBundle.getBundle("aflobby/languages").getString("CLoginPanel.Login_Page");


    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        Passbox = new javax.swing.JPasswordField();
        UserBox = new javax.swing.JTextField();
        LoginButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        Server = new javax.swing.JComboBox();
        PortBox = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        BackButton = new javax.swing.JButton();
        RegButton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        protocolbox = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        RememberPassCheckBox = new javax.swing.JCheckBox();
        autologincheckbox = new javax.swing.JCheckBox();
        ChatOnlyCheckBox = new javax.swing.JCheckBox();
        SHA1CheckBox = new javax.swing.JCheckBox();
        jCheckBox1 = new javax.swing.JCheckBox();

        setAlignmentX(0.0F);
        setAlignmentY(0.0F);
        setFont(new java.awt.Font("Arial", 0, 11));
        setMaximumSize(new java.awt.Dimension(2840, 5060));
        setMinimumSize(new java.awt.Dimension(840, 570));
        setPreferredSize(new java.awt.Dimension(840, 570));

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(jLabel1.getFont().deriveFont(jLabel1.getFont().getSize()+8f));
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("aflobby/languages"); // NOI18N
        jLabel1.setText(bundle.getString("CLoginPanel.Login_to")); // NOI18N

        Passbox.setFont(Passbox.getFont().deriveFont(Passbox.getFont().getSize()+1f));
        Passbox.setText(CUserSettings.GetValue("lastpassword", ""));
        Passbox.setFocusCycleRoot(true);
        Passbox.setMaximumSize(new java.awt.Dimension(2147483647, 19));
        Passbox.setMinimumSize(new java.awt.Dimension(11, 19));
        Passbox.setNextFocusableComponent(LoginButton);
        Passbox.setPreferredSize(new java.awt.Dimension(11, 19));
        Runnable doWorkRunnable = new Runnable() {

            public void run() {
                //
                Passbox.putClientProperty(LafWidget.PASSWORD_STRENGTH_CHECKER, new PasswordStrengthChecker() {

                    public PasswordStrength getStrength(char[] password) {
                        if (password == null)
                        return PasswordStrength.WEAK;
                        int length = password.length;
                        if (length < 3)
                        return PasswordStrength.WEAK;
                        if (length < 6)
                        return PasswordStrength.MEDIUM;
                        return PasswordStrength.STRONG;
                    }

                    public String getDescription(PasswordStrength strength) {
                        if (strength == PasswordStrength.WEAK)
                        return "<html>This password is <b>way</b> too weak</html>";
                        if (strength == PasswordStrength.MEDIUM)
                        return "<html>Come on, you can do<br> a little better than that</html>";
                        if (strength == PasswordStrength.STRONG)
                        return "OK";
                        return null;
                    }
                });
            }
        };
        SwingUtilities.invokeLater(doWorkRunnable);
        Passbox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                PassboxKeyReleased(evt);
            }
        });

        UserBox.setFont(UserBox.getFont().deriveFont(UserBox.getFont().getSize()+1f));
        UserBox.setText(LM.UserSettings.GetValue ("lastloginname",""));
        UserBox.setMaximumSize(new java.awt.Dimension(2147483647, 19));
        UserBox.setNextFocusableComponent(Passbox);

        LoginButton.setFont(LoginButton.getFont().deriveFont(LoginButton.getFont().getSize()+1f));
        LoginButton.setText(bundle.getString("CLoginPanel.Login_to_the_server")); // NOI18N
        LoginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoginButtonActionPerformed(evt);
            }
        });

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setFont(jLabel2.getFont().deriveFont(jLabel2.getFont().getSize()+1f));
        jLabel2.setLabelFor(UserBox);
        jLabel2.setText(bundle.getString("CLoginPanel.Username")); // NOI18N

        jLabel3.setFont(jLabel3.getFont().deriveFont(jLabel3.getFont().getSize()+1f));
        jLabel3.setLabelFor(Passbox);
        jLabel3.setText(bundle.getString("CLoginPanel.Password")); // NOI18N

        Server.setEditable(true);
        Server.setFont(Server.getFont().deriveFont(Server.getFont().getSize()+1f));
        Server.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "taspringmaster.clan-sy.com", "buildbot.no-ip.org", "localhost" }));

        PortBox.setFont(PortBox.getFont().deriveFont(PortBox.getFont().getSize()+1f));
        PortBox.setText("8200");
        PortBox.setToolTipText(bundle.getString("CLoginPanel.port_numbertooltip")); // NOI18N
        PortBox.setNextFocusableComponent(UserBox);

        jLabel4.setFont(jLabel4.getFont().deriveFont(jLabel4.getFont().getSize()-3f));
        jLabel4.setForeground(new java.awt.Color(204, 204, 204));
        jLabel4.setText("Java Lobby for the masses");

        BackButton.setFont(BackButton.getFont().deriveFont(BackButton.getFont().getSize()+1f));
        BackButton.setText(bundle.getString("CLoginPanel.<_back")); // NOI18N
        BackButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                BackButtonMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                BackButtonMouseReleased(evt);
            }
        });

        RegButton.setFont(RegButton.getFont().deriveFont(RegButton.getFont().getSize()+1f));
        RegButton.setText(bundle.getString("CLoginPanel.Register_a_new_Account")); // NOI18N
        RegButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RegButtonActionPerformed(evt);
            }
        });

        jLabel5.setFont(jLabel5.getFont().deriveFont(jLabel5.getFont().getSize()+1f));
        jLabel5.setLabelFor(Server);
        jLabel5.setText(bundle.getString("CLoginPanel.Server")); // NOI18N

        jLabel6.setFont(jLabel6.getFont().deriveFont(jLabel6.getFont().getSize()+1f));
        jLabel6.setLabelFor(PortBox);
        jLabel6.setText(bundle.getString("CLoginPanel.TCP_Port")); // NOI18N

        protocolbox.setFont(protocolbox.getFont().deriveFont(protocolbox.getFont().getSize()+1f));
        protocolbox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "TASServer v0.33", "AFS" }));
        protocolbox.setEnabled(false);

        jLabel7.setFont(jLabel7.getFont().deriveFont(jLabel7.getFont().getSize()+1f));
        jLabel7.setText(bundle.getString("CLoginPanel.Protocol")); // NOI18N

        RememberPassCheckBox.setFont(RememberPassCheckBox.getFont().deriveFont(RememberPassCheckBox.getFont().getSize()+1f));
        RememberPassCheckBox.setSelected(!CUserSettings.GetValue("lastpassword", "").equals(""));
        RememberPassCheckBox.setText("Remember Password");
        RememberPassCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RememberPassCheckBoxActionPerformed(evt);
            }
        });

        autologincheckbox.setFont(autologincheckbox.getFont().deriveFont(autologincheckbox.getFont().getSize()+1f));
        autologincheckbox.setText("AutoLogin on startup");
        autologincheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autologincheckboxActionPerformed(evt);
            }
        });

        ChatOnlyCheckBox.setFont(ChatOnlyCheckBox.getFont().deriveFont(ChatOnlyCheckBox.getFont().getSize()+1f));
        ChatOnlyCheckBox.setSelected(Main.chat_only_mode);
        ChatOnlyCheckBox.setText("Log in in chat only mode");
        ChatOnlyCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChatOnlyCheckBoxActionPerformed(evt);
            }
        });

        SHA1CheckBox.setFont(SHA1CheckBox.getFont().deriveFont(SHA1CheckBox.getFont().getSize()+1f));
        SHA1CheckBox.setText("Use SHA1 password hash (Advanced)");
        SHA1CheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SHA1CheckBoxActionPerformed(evt);
            }
        });

        jCheckBox1.setFont(jCheckBox1.getFont().deriveFont(jCheckBox1.getFont().getSize()+1f));
        jCheckBox1.setSelected(Main.ignorespringversion);
        jCheckBox1.setText("Ignore Spring version");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel4))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(BackButton))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(1, 1, 1)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addComponent(RegButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(LoginButton))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(43, 43, 43)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(protocolbox, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(Server, javax.swing.GroupLayout.Alignment.LEADING, 0, 222, Short.MAX_VALUE)
                                    .addComponent(PortBox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(UserBox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 222, Short.MAX_VALUE)
                                    .addComponent(Passbox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 222, Short.MAX_VALUE)
                                    .addComponent(autologincheckbox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(RememberPassCheckBox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(ChatOnlyCheckBox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jCheckBox1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(SHA1CheckBox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(444, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {ChatOnlyCheckBox, RememberPassCheckBox, SHA1CheckBox, autologincheckbox, jCheckBox1});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Server, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(protocolbox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PortBox, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(UserBox, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(Passbox, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(RememberPassCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(autologincheckbox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ChatOnlyCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SHA1CheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 155, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BackButton)
                    .addComponent(RegButton)
                    .addComponent(LoginButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {BackButton, LoginButton, RegButton});

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {UserBox, jLabel2});

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {Passbox, jLabel3});

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {Server, jLabel5});

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {PortBox, jLabel6});

    }// </editor-fold>//GEN-END:initComponents

    private void LoginButtonActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoginButtonActionPerformed


        if (UserBox.getText().trim().equals("")) {
            LM.Toasts.AddMessage(java.util.ResourceBundle.getBundle("aflobby/languages").getString("CLoginPanel.You_must_enter_a_username"));
            return;
        }
        String pass = String.valueOf(Passbox.getPassword(), 0, Passbox.getPassword().length);
        if (pass.trim().equalsIgnoreCase("")) {
            LM.Toasts.AddMessage(java.util.ResourceBundle.getBundle("aflobby/languages").getString("CLoginPanel.You_must_enter_a_password"));
            return;
        } //TASServer v0.33
        //TASServer v0.33



        String protocol = (String) protocolbox.getSelectedItem();
        CUserSettings.PutValue("lastprotocol", protocol);
        if (protocol.equalsIgnoreCase("TASServer v0.33")) {
            LM.protocol = new CTASServerProtocol();
            LM.core.AddModule(LM.protocol);
            LM.protocol.Init(LM);
        } else {
            LM.Toasts.AddMessage(java.util.ResourceBundle.getBundle("aflobby/languages").getString("CLoginPanel.unsupported_protocol"));
            return;
        }
        CLoginProgress j = new CLoginProgress(LM);
        LM.AddView(j, true);
        LoginTask LT = new LoginTask(LM,sha);
        LT.server = Server.getSelectedItem().toString();
        CUserSettings.PutValue("lastserver", LT.server);

        LT.port = Integer.parseInt(PortBox.getText());
        CUserSettings.PutValue("lastserverport", PortBox.getText());

        LT.username = UserBox.getText();
        CUserSettings.PutValue("lastloginname", LT.username);
        if (RememberPassCheckBox.isSelected()) {
            CUserSettings.PutValue("lastpassword", pass);
        } else {
            CUserSettings.PutValue("lastpassword", "");
        }
        LT.password = pass;
        LT.lp = j;
        LT.start();
    }//GEN-LAST:event_LoginButtonActionPerformed

    private void PassboxKeyReleased (java.awt.event.KeyEvent evt) {//GEN-FIRST:event_PassboxKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (UserBox.getText().trim().equals("")) {
                LM.Toasts.AddMessage(java.util.ResourceBundle.getBundle("aflobby/languages").getString("CLoginPanel.You_must_enter_a_username"));
                return;
            }
            String pass = String.valueOf(Passbox.getPassword(), 0, Passbox.getPassword().length);
            if (pass.trim().equalsIgnoreCase("")) {
                LM.Toasts.AddMessage(java.util.ResourceBundle.getBundle("aflobby/languages").getString("CLoginPanel.You_must_enter_a_password"));
                return;
            }

            CLoginProgress j = new CLoginProgress(LM);
            LM.AddView(j, true);
            LoginTask LT = new LoginTask(LM,sha);
            LT.server = Server.getSelectedItem().toString();
            LT.port = Integer.parseInt(PortBox.getText());
            LT.username = UserBox.getText();
            CUserSettings.PutValue("lastloginsha", String.valueOf(sha));
            CUserSettings.PutValue("lastloginname", LT.username);
            LT.password = pass;
            LT.start();
        }
    }//GEN-LAST:event_PassboxKeyReleased

    private void RegButtonActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RegButtonActionPerformed
        if (!LM.ViewExists("Reg")) {
            JRegView jr = new JRegView(LM);
            LM.AddView(jr, true);
        } else {
            LM.SetFocus("Reg");
        } // TODO add your handling code here:
    }//GEN-LAST:event_RegButtonActionPerformed

    private void BackButtonMouseReleased (java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BackButtonMouseReleased
// TODO add your handling code here:
        LM.SetFocus("Splash");
        LM.RemoveView(this);
    }//GEN-LAST:event_BackButtonMouseReleased

    private void BackButtonMousePressed (java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BackButtonMousePressed
        }//GEN-LAST:event_BackButtonMousePressed

    private void autologincheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autologincheckboxActionPerformed
        CUserSettings.PutValue("autologin", String.valueOf(autologincheckbox.isSelected()));
        Main.ignoreautologin = true;
}//GEN-LAST:event_autologincheckboxActionPerformed

    private void RememberPassCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RememberPassCheckBoxActionPerformed
        autologincheckbox.setEnabled(RememberPassCheckBox.isSelected());
    }//GEN-LAST:event_RememberPassCheckBoxActionPerformed

    private void ChatOnlyCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChatOnlyCheckBoxActionPerformed
        Main.chat_only_mode = ChatOnlyCheckBox.isSelected();
    }//GEN-LAST:event_ChatOnlyCheckBoxActionPerformed
    boolean sha = false;
    private void SHA1CheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SHA1CheckBoxActionPerformed
        sha = SHA1CheckBox.isSelected();
    }//GEN-LAST:event_SHA1CheckBoxActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        Main.ignorespringversion = jCheckBox1.isSelected();
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    @Override
    public void Update() {
    //
    }

    @Override
    public void ValidatePanel() {
        validate();
        LM.DoValidate();
    }

    @Override
    public void NewGUIEvent(CEvent e) {
        if (e.data[0].equalsIgnoreCase("UNKNOWN_HOST") == true) {
        } else if (e.data[0].equalsIgnoreCase("RESENDLOGIN")) {
            //port = Integer.parseInt (PortBox.getText ());
            //port = Integer.parseInt (PortBox.getText ());
            String username = UserBox.getText();
            String pass = String.valueOf(Passbox.getPassword(), 0, Passbox.getPassword().length);
            LM.protocol.Login(username, pass,sha);
        //
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BackButton;
    private javax.swing.JCheckBox ChatOnlyCheckBox;
    private javax.swing.JButton LoginButton;
    private javax.swing.JPasswordField Passbox;
    private javax.swing.JTextField PortBox;
    private javax.swing.JButton RegButton;
    private javax.swing.JCheckBox RememberPassCheckBox;
    private javax.swing.JCheckBox SHA1CheckBox;
    private javax.swing.JComboBox Server;
    private javax.swing.JTextField UserBox;
    private javax.swing.JCheckBox autologincheckbox;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JComboBox protocolbox;
    // End of variables declaration//GEN-END:variables
}
