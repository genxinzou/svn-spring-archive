/*
 * LMain.java
 *
 * Created on 22 May 2006, 18:44
 */

package aflobby;
import aflobby.UI.CUISettings;
import aflobby.UI.CUserSettings;
import aflobby.UI.CView;
import aflobby.framework.CCore;
import aflobby.framework.IModule;
import aflobby.protocol.tasserver.ui.CAgree;
import aflobby.protocol.IProtocol;
import java.awt.Color;
import java.awt.Component;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Timer;
import java.util.TimerTask;
import javax.swing.SwingUtilities;

/**
 *
 * @author  AF
 */

class UpdateTask extends TimerTask {
    public LMain LM;
    UpdateTask (LMain L){
        LM = L;
    }
    public void run () {
        //if(LM.updatedone){
            LM.core.Update ();
        //}
    }
}


public class LMain extends java.awt.Frame implements IModule {
    public boolean Registering = false;
    //public boolean nextvalidate = false;
    public boolean timerdo;
    public boolean pageview=false;
    
    public CToast Toasts = null;
    public CPlayers playermanager;
    public IProtocol protocol;
    public CAgree Agree = new CAgree ();
    
    private ArrayList<CView> views = new ArrayList<CView>();

    public CUserCommandHandler command_handler;
    public CUserSettings UserSettings;
    
    
    public IBattleModel battleModel;
    //public Vector<JChannelWindow> channels = new Vector<JChannelWindow>();
    //public ArrayList<String> joined = new ArrayList<String>();
    private ArrayList<CEvent> GUIeventqueue = new ArrayList<CEvent>();
    private ArrayList<CEvent> eventqueue = new ArrayList<CEvent>();
    public javax.swing.JColorChooser ColorChooser = null;
    
    public CCore core = null;
    
    public LMain () {
        
        core = new CCore();
        //Runnable doWorkRunnable = new Runnable () {
        //    public void run () {
        initComponents ();
        //    }
        //};
        //SwingUtilities.invokeLater (doWorkRunnable);

        LMain LM = this;
        core.AddModule(LM);
        
        playermanager = new CPlayers ();
        playermanager.Init(this);
        core.AddModule(playermanager);
        
        command_handler = new CUserCommandHandler ();
        command_handler.Init(this);
        core.AddModule(command_handler);
        
        Toasts = new CToast();
        core.AddModule(Toasts);
        
        UserSettings = new CUserSettings ();
        
        
        // test glest support
        if(aflobby.UI.CUserSettings.GetValue("glest.command", "foobar").equals("foobar")==false){
            CContentManager.installed_engines.add("glest");
        }
    }
    
    
    public void start (){
        setVisible (true);
        
        //protocol = new CTASServerProtocol ();
        //protocol.Init (this);

        new Timer ().schedule (new UpdateTask (this),
            10,        //initial delay
            30);  //subsequent rate
        Toasts.Init ("");
        Agree.Init (this);
        DoValidate ();
    }
    
    void ChangeSize (int x, int y){
        int dx = x;
        int dy = y;
        if((dx < 860)&&(dy <650)){
            return;
        }
        if(dx < 860){
            dx = 860;
        }
        if(dy < 650){
            dy = 650;
        }
        final int dx1 = dx;
        final int dy1 = dy;
        Runnable doWorkRunnable = new Runnable () {
            public void run () { setBounds(getLocation().x, getLocation().y, dx1, dy1);/*DoChangeSize ();*/ }
        };
        SwingUtilities.invokeLater (doWorkRunnable);
    }
    
    public Color lastColor = Color.blue;
    @SuppressWarnings("static-access")
    public Color ShowColorDialog(Component component, String title){
        //
        lastColor = ColorChooser.showDialog(component, title, lastColor);
        return lastColor;
    }
    //int dx,dy;
    /*void DoChangeSize (){
        setSize (dx,dy);
        DoValidate ();
        //dx = this.getWidth ();
        //dy = this.getHeight ();
        //this.jPanel1.setSize (dx,dy-40);//);//(int)(int)
        //this.jPanel2.setSize ((int)x,20);
        //this.jPanel3.setSize ((int)x,20);
        //this.jPanel3.setLocation (0,(int)y-20);
        //this.corner.setLocation (dx-20,dy-20);//setSize ((int)x,20);//.setLocation((int)x-25,0/*(int)y-20*///);
        //jTextPane1.setLocation (x-25,0);
        
        
    //}*/
    
    /** Creates new form LMain */
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jInternalFrame1 = new javax.swing.JInternalFrame();
        jPanel1 = new javax.swing.JPanel();

        jInternalFrame1.setVisible(true);

        javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(jInternalFrame1.getContentPane());
        jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
        jInternalFrame1Layout.setHorizontalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jInternalFrame1Layout.setVerticalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        setFont(new java.awt.Font("Arial", 0, 12));
        setIconImage(CUISettings.GetWindowIcon());
        setMinimumSize(new java.awt.Dimension(860, 650));
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("aflobby/languages"); // NOI18N
        setTitle(bundle.getString("LMain.AFLobby")); // NOI18N
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });

        jPanel1.setAlignmentX(0.0F);
        jPanel1.setAlignmentY(0.0F);
        jPanel1.setMaximumSize(new java.awt.Dimension(8400, 5700));
        jPanel1.setMinimumSize(new java.awt.Dimension(840, 570));
        jPanel1.setPreferredSize(new java.awt.Dimension(840, 575));
        jPanel1.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 862, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 624, Short.MAX_VALUE)
        );

        ColorChooser = new javax.swing.JColorChooser();

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void formMouseClicked (java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        if(evt.getClickCount () == 2){
            if((getExtendedState () & LMain.MAXIMIZED_BOTH) != 0){
                setExtendedState (LMain.NORMAL);
            }else{
                setExtendedState (MAXIMIZED_BOTH);
            }
            int x = getWidth ();
            int y = getHeight ();
            this.ChangeSize (x,y);
        }
    }//GEN-LAST:event_formMouseClicked
                        
    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged

    }//GEN-LAST:event_formMouseDragged
    
    
    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed

        //this.repaint ();
    }//GEN-LAST:event_formMousePressed
    
    
    
    
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        //JLoginPanel LP = new JLoginPanel(this);
        //AddView(LP,false);
        final LMain LM = this;
        Runnable doWorkRunnable = new Runnable () {
            public void run () {
                if(Boolean.valueOf(CUserSettings.GetValue("autologin", "false"))){
                    CLoginProgress l = new CLoginProgress(LM);
                    AddView(l,true);
                }else{
                    CSplashScreen jk = new CSplashScreen (LM);
                    AddView (jk,true);
                }
                ChangeSize (860,631);
                jPanel1.validate ();//ValidateNow ();
            }
        };
        SwingUtilities.invokeLater (doWorkRunnable);
        
    }//GEN-LAST:event_formWindowOpened
    
    
    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        this.setVisible(false);
        protocol.Disconnect();
        System.exit (0);
    }//GEN-LAST:event_exitForm
    
    public boolean updatedone=true;
    public void Update (){

        updatedone=false;
        
        
        
        ProcessEvents ();
        
        /*if(views.isEmpty ()==false){
            Iterator<CView> i = views.iterator ();
            while(i.hasNext ()){
                CView n = i.next ();
                n.Update ();
            }
        }*/
        
        //if(battleModel != null){
        //    battleModel.Update ();
        //}
        
        //this.playermanager.Update ();
        //this.command_handler.Update ();
        //core.Update();
        
        updatedone=true;
        
//        Iterator<JChannelWindow> i = channels.iterator();
//        while(i.hasNext()){
//            JChannelWindow j = i.next();
//            j.Update();
//        }
        
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main (String args[]) {
        java.awt.EventQueue.invokeLater (new Runnable () {
            public void run () {
                new LMain ().setVisible (true);
            }
        });
    }
    
    
    public void NewEvent (CEvent e){
        eventqueue.add (e);
        //core.NewEvent(e);
    }
    
    
    public void NewGUIEvent (CEvent e){
        GUIeventqueue.add (e);
        //core.NewGUIEvent(e);
    }
    
    
    public void ProcessEvents (){
        if(eventqueue.isEmpty ()==false){
            ArrayList<CEvent> temp = new ArrayList<CEvent>();
            temp.addAll (eventqueue);
            eventqueue.clear ();
            
            Iterator<CEvent> k = temp.iterator ();
            while(k.hasNext ()==true){
                final CEvent e = k.next ();
                //command_handler.NewEvent (e);
                //System.out.println ("ProcEvent" + e.data[0]);
//                if(e.data[0].equalsIgnoreCase("JOIN")){
//                    // create a new channel object
//                    JChannelWindow ch = new JChannelWindow();
//                    ch.Init(this,e.data[1],e.connection);
//                    ch.setVisible(true);
//                    joined.add(e.data[1]);
//                    channels.add(ch);
//                }else
                if(e.IsEvent ("ACCEPTED")){
                    DoValidate ();
                } else if(e.IsEvent ("DENIED")){
                    String s = java.util.ResourceBundle.getBundle("aflobby/languages").getString("LMain.Login_Failed_") +Misc.makeSentence (e.data,1);
                    Toasts.AddMessage (s);
                    SetFocus ("LoginPanel");
                } else if(e.IsEvent ("AGREEMENT")){
                    Agree.AddLine (Misc.makeSentence (e.data,1));
                } else if(e.IsEvent ("AGREEMENTEND")){
                    Runnable doWorkRunnable = new Runnable () {
                        public void run () { Agree.setVisible (true); }
                    };
                    SwingUtilities.invokeLater (doWorkRunnable);
                } else if(e.IsEvent ("BROADCAST")){
                    this.Toasts.AddMessage (Misc.makeSentence (e.data,1));
                } else if(e.IsEvent (CEvent.DISCONNECTED)){
                    SetFocus ("LoginPanel");
                    
                }
//                if(channels.isEmpty()==false){
//                    Iterator<JChannelWindow> p = channels.iterator();
//                    while(p.hasNext()){
//                        JChannelWindow j = p.next();
//                        j.NewEvent(e);
//                    }
//                }
                /*ArrayList<CView> vtemp = new ArrayList<CView>();
                vtemp.addAll (views);
                vtemp.addAll(nondisplayedviews);
                Iterator<CView> i = vtemp.iterator ();
                while(i.hasNext ()){
                    CView n = i.next ();
                    if(n == null) continue;
                    n.NewEvent (e);
                }*/
                
                
                //if(battleModel != null){
                //    battleModel.NewEvent (e);
                //}
                
            }
        }
        if(GUIeventqueue.isEmpty ()==false){
            //System.out.println ("procgui");
            ArrayList<CEvent> temp2 = new ArrayList<CEvent>();
            temp2.addAll (GUIeventqueue);
            GUIeventqueue.clear ();
            ArrayList<CView> temp3 = new ArrayList<CView>();
            temp3.addAll (views);
            Iterator<CEvent> q = temp2.iterator ();
            while(q.hasNext ()==true){
                CEvent e = q.next ();
                //protocol.NewEvent (e);
                
                if(e.IsEvent (CEvent.LOGGEDOUT)||e.IsEvent (CEvent.LOGOUT)){
                    SetFocus ("LoginPanel");
                }
                //command_handler.NewGUIEvent (e);
//                if(channels.isEmpty()==false){
//                    Iterator<JChannelWindow> p = channels.iterator();
//                    while(p.hasNext()){
//                        JChannelWindow j = p.next();
//                        j.NewEvent(e);
//                    }
//                }
                //if(protocol != null){
                    //connection.traffic.add ("got event " + Misc.makeSentence (e.data,0));
                //    protocol.NewGUIEvent (e);
                //}
                /*ArrayList<CView> vtemp = new ArrayList<CView>();
                vtemp.addAll (views);
                vtemp.addAll(nondisplayedviews);
                Iterator<CView> i = vtemp.iterator ();
                while(i.hasNext ()){
                    CView n = i.next ();
                    n.NewGUIEvent (e);
                }*/
                
                //if(battleModel != null){
                //    battleModel.NewGUIEvent (e);
                //}
                
            }
        }
    }
    
    public boolean ViewExists (String s){
        //
        Iterator<CView> i = views.iterator ();
        while(i.hasNext ()){
            CView n =  i.next ();
            if(n.getTitle().equalsIgnoreCase (s)){
                return true;
            }
        }
        return false;
    }
    
    public void AddView (final CView v,final boolean setfocus){
        //v.setVisible(setfocus);
        core.AddModule(v);
        
        Runnable doWorkRunnable = new Runnable () {
            public void run () {
                v.setVisible (setfocus);
                jPanel1.add (v);
                if(setfocus){
                    SetFocus (v);
                }
            }
        };
        SwingUtilities.invokeLater (doWorkRunnable);
        
        
        views.add (v);
        //DoValidate();
//        else{
//            this.ValidateNow ();
//            //DoValidate ();
//        }
    }

    
    public void RemoveView (final CView v){
        
        core.RemoveModule(v);
        views.remove(v);
        Runnable doWorkRunnable = new Runnable () {
            public void run () {
                jPanel1.remove ((Component)v);
            }
        };
        SwingUtilities.invokeLater (doWorkRunnable);
    }
    
    
    public void RemoveView (String s){
        //synchronized(views){
        for(int i = 0; i< views.size (); i++){
            final CView v = views.get (i);
            if(v.getTitle().equals (s)){
                RemoveView(v);
                i--; //decrement so that we then get incremented and handle the same index again
            }
        }

    }
    
    public void SetFocus (final CView v){
        
        //synchronized(views){
        if(views.contains (v)){
            Runnable doWorkRunnable = new Runnable () {
                public void run () {
                    if(jPanel1.getComponentZOrder (v)!= -1){
                        jPanel1.setComponentZOrder (v,0);
                    }
                }
            };
            SwingUtilities.invokeLater (doWorkRunnable);
            Iterator<CView> i = views.iterator ();
            while(i.hasNext ()){
                final CView n =  i.next ();
                Runnable doWorkRunnable2 = new Runnable () {
                    public void run () {
                        n.setVisible (n == v);
                    }
                };
                SwingUtilities.invokeLater (doWorkRunnable2);
            }
            
        }
        //}
        
        Runnable doWorkRunnable = new Runnable () {
            public void run () {
                jPanel1.validate ();
            }
        };
        SwingUtilities.invokeLater (doWorkRunnable);
        
    }
    
    public void SetFocus (String s){
        //v.setVisible(true);
        Iterator<CView> i = views.iterator ();
        while(i.hasNext ()){
            CView n =  i.next ();
            if(n == null){
                System.out.println (java.util.ResourceBundle.getBundle("aflobby/languages").getString("LMain.n_==_null_in_LMain"));
                continue;
            }
            if(n.getTitle().equalsIgnoreCase (s)){
                SetFocus (n);
                return;
            }
        }
    }
    
    public void DoValidate (){
        jPanel1.revalidate ();
        //nextvalidate = true;
    }
    
    public void ValidateNow (){
        Runnable doWorkRunnable = new Runnable () {
            public void run () { jPanel1.validate (); }
        };
        SwingUtilities.invokeLater (doWorkRunnable);
        //nextvalidate = false;
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JInternalFrame jInternalFrame1;
    public javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables

    /**
     * This function is here in order to support the IModule interface. Because
     * this class is somewhat old and more of a kludge than a design decisions,
     * one should never call this function.
     * 
     * In time this class will be replaced with a cleaner pice of code or the
     * nature of this function will change, probably because the parameter will
     * change to an instance of CCore.
     * 
     * @param L is a reference to the LMain class instance, which is pointless
     * because we have the 'this' keyword tot hat job here!
     */
    public void Init(LMain L) {
        throw new UnsupportedOperationException("This should never happen!");
    }

    public void OnRemove() {
        
    }
    
}
