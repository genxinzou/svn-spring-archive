/*
 * JRegView.java
 *
 * Created on 11 September 2006, 21:26
 */

package aflobby;

import aflobby.framework.CEvent;
import aflobby.UI.CUISettings;
import aflobby.UI.CUserSettings;
import aflobby.UI.CView;
import aflobby.protocol.tasserver.CTASServerProtocol;
import javax.swing.SwingUtilities;
import org.jvnet.lafwidget.LafWidget;
import org.jvnet.lafwidget.text.PasswordStrengthChecker;
import org.jvnet.lafwidget.utils.LafConstants.PasswordStrength;

/**
 *
 * @author  Shade
 */
public class JRegView extends CView implements java.awt.event.MouseListener {
    
    
    /** Creates new form JRegView
     * @param L 
     */
    public JRegView(LMain L) {
        LM = L;
        Initialize();
        ValidatePanel();
    }
    
    /**
     * 
     */
    @Override
    public void Initialize() {
        initComponents();
        setTitle("Reg");
        UserTitle = "Register";
    }
    /**
     * 
     */
    @Override
    public void ValidatePanel(){
        validate();
        LM.DoValidate();
    }

    /**
     * 
     * @param e
     */
    @Override
    public void NewEvent(CEvent e){
        if(e.data[0].equalsIgnoreCase("REGISTRATIONACCEPTED")==true){
            LM.protocol.Disconnect();
            LM.Registering=false;
            LM.Toasts.AddMessage("Registration Complete! Please login with your new username and password.");
            if (LM.ViewExists("LoginPanel") == false) {
                CLoginPanel LP = new CLoginPanel(LM);
                LM.AddView(LP, true);
            } else {
                LM.SetFocus("LoginPanel");
            }
            LM.RemoveView(this);
        }else if (e.data[0].equalsIgnoreCase("REGISTRATIONDENIED")==true){
            LM.protocol.Disconnect();
            LM.Registering=false;
            LM.Toasts.AddMessage("Registration Failed! Server says: "+Misc.makeSentence(e.data,1));
        }
        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        ServerCombo = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        Port = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        Username = new javax.swing.JTextField();
        Password = new javax.swing.JPasswordField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        Password2 = new javax.swing.JPasswordField();
        jLabel9 = new javax.swing.JLabel();
        SHACheckBox = new javax.swing.JCheckBox();

        setFont(new java.awt.Font("Arial", 0, 11));
        setMaximumSize(new java.awt.Dimension(840, 560));
        setMinimumSize(new java.awt.Dimension(840, 560));

        jLabel1.setFont(jLabel1.getFont().deriveFont(jLabel1.getFont().getSize()+8f));
        jLabel1.setText("Register");

        ServerCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "taspringmaster.clan-sy.com", "fnord.clan-sy.com", "compstomp.de", "localhost", "cheetah.sentvid.org" }));

        jLabel2.setFont(jLabel2.getFont().deriveFont(jLabel2.getFont().getSize()+6f));
        jLabel2.setText("Connection");

        jLabel3.setText("What server do you wish to register this username with?");

        Port.setText("8200");

        jLabel4.setFont(CUISettings.GetFont(12));
        jLabel4.setText("What port does this server use?");

        jLabel5.setFont(jLabel5.getFont().deriveFont(jLabel5.getFont().getSize()+6f));
        jLabel5.setText("User data");

        Username.setNextFocusableComponent(Password);

        Password.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 0), 1, true));
        Password.setNextFocusableComponent(Password2);

        jLabel6.setText("What username would you like?");

        jLabel7.setText("And what password would you like?");

        jLabel8.setFont(jLabel8.getFont().deriveFont(jLabel8.getFont().getSize()+6f));
        jLabel8.setText("League & Ladder");
        jLabel8.setEnabled(false);

        jCheckBox1.setFont(CUISettings.GetFont(12));
        jCheckBox1.setText("Register me at the Spring ladder at spring-league.com");
        jCheckBox1.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jCheckBox1.setEnabled(false);
        jCheckBox1.setMargin(new java.awt.Insets(0, 0, 0, 0));

        jButton1.setFont(CUISettings.GetFont(12));
        jButton1.setText("Register");
        jButton1.addMouseListener(this);

        jButton2.setFont(CUISettings.GetFont(12));
        jButton2.setText("< back");
        jButton2.addMouseListener(this);

        Password2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 0), 1, true));

        jLabel9.setText("repeat your password again here:");

        SHACheckBox.setText("Use an SHA-1 password hash (advanced)");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(jLabel8)
                    .addComponent(jCheckBox1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jLabel9)))
                        .addGap(17, 17, 17)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(Password, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                            .addComponent(Port, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Username, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                            .addComponent(ServerCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Password2, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(SHACheckBox)))
                    .addComponent(jLabel2)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(242, 242, 242))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23)
                .addComponent(jLabel2)
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(ServerCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(Port, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(44, 44, 44)
                .addComponent(jLabel5)
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(Username, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(Password, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Password2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jLabel8)
                        .addGap(22, 22, 22)
                        .addComponent(jCheckBox1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 101, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton2)
                            .addComponent(jButton1)))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SHACheckBox)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {Password, Password2});

        Runnable doWorkRunnable = new Runnable() {

            public void run() {
                //
                Password.putClientProperty(LafWidget.PASSWORD_STRENGTH_CHECKER, new PasswordStrengthChecker() {

                    public PasswordStrength getStrength(char[] password) {
                        if (password == null)
                        return PasswordStrength.WEAK;
                        int length = password.length;
                        if (length < 3)
                        return PasswordStrength.WEAK;
                        if (length < 6)
                        return PasswordStrength.MEDIUM;
                        return PasswordStrength.STRONG;
                    }

                    public String getDescription(PasswordStrength strength) {
                        if (strength == PasswordStrength.WEAK)
                        return "<html>This password is <b>way</b> too weak</html>";
                        if (strength == PasswordStrength.MEDIUM)
                        return "<html>Come on, you can do<br> a little better than that</html>";
                        if (strength == PasswordStrength.STRONG)
                        return "OK";
                        return null;
                    }
                });
            }
        };
        SwingUtilities.invokeLater(doWorkRunnable);
        Runnable doWorkRunnable2 = new Runnable() {

            public void run() {
                //
                Password2.putClientProperty(LafWidget.PASSWORD_STRENGTH_CHECKER, new PasswordStrengthChecker() {

                    public PasswordStrength getStrength(char[] password) {
                        if (password == null)
                        return PasswordStrength.WEAK;
                        int length = password.length;
                        if (length < 3)
                        return PasswordStrength.WEAK;
                        if (length < 6)
                        return PasswordStrength.MEDIUM;
                        return PasswordStrength.STRONG;
                    }

                    public String getDescription(PasswordStrength strength) {
                        if (strength == PasswordStrength.WEAK)
                        return "<html>This password is <b>way</b> too weak</html>";
                        if (strength == PasswordStrength.MEDIUM)
                        return "<html>Come on, you can do<br> a little better than that</html>";
                        if (strength == PasswordStrength.STRONG)
                        return "OK";
                        return null;
                    }
                });
            }
        };
        SwingUtilities.invokeLater(doWorkRunnable2);
    }

    // Code for dispatching events from components to event handlers.

    public void mouseClicked(java.awt.event.MouseEvent evt) {
    }

    public void mouseEntered(java.awt.event.MouseEvent evt) {
    }

    public void mouseExited(java.awt.event.MouseEvent evt) {
    }

    public void mousePressed(java.awt.event.MouseEvent evt) {
        if (evt.getSource() == jButton1) {
            JRegView.this.jButton1MousePressed(evt);
        }
        else if (evt.getSource() == jButton2) {
            JRegView.this.jButton2MousePressed(evt);
        }
    }

    public void mouseReleased(java.awt.event.MouseEvent evt) {
        if (evt.getSource() == jButton2) {
            JRegView.this.jButton2MouseReleased(evt);
        }
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseReleased
        LM.Registering=false;
        if (LM.ViewExists("LoginPanel") == false) {
            CLoginPanel LP = new CLoginPanel(LM);
            LM.AddView(LP, true);
        } else {
            LM.SetFocus("LoginPanel");
        }
        LM.RemoveView(this);
    }//GEN-LAST:event_jButton2MouseReleased

    private void jButton2MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MousePressed
        //LM.Registering=false;
        //LM.SetFocus("LoginPanel");
    }//GEN-LAST:event_jButton2MousePressed

    private void jButton1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MousePressed
        LM.Registering = true;
        String username = Username.getText().trim();
        if(username.equalsIgnoreCase ("")){
            LM.Toasts.AddMessage ("Type out your requested username");
            return;
        }
        String password = String.valueOf(Password.getPassword(),0,Password.getPassword().length);
        String password2 = String.valueOf(Password2.getPassword(),0,Password2.getPassword().length);
        if(!password2.equals(password)){
            LM.Toasts.AddMessage ("error:: your passwords dont match, retype them out to be sure");
            return;
        }
        String protocol = "";//(String) protocolbox.getSelectedItem();
        CUserSettings.PutValue("lastprotocol", protocol);
        //if (protocol.equalsIgnoreCase("TASServer v0.33")) {
        LM.protocol = new CTASServerProtocol();
        LM.core.AddModule(LM.protocol);
        LM.protocol.Init(LM);
        LM.protocol.Connect(ServerCombo.getSelectedItem().toString(),Integer.parseInt (Port.getText()));
        LM.protocol.Register (username,password,SHACheckBox.isSelected());
    }//GEN-LAST:event_jButton1MousePressed
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPasswordField Password;
    private javax.swing.JPasswordField Password2;
    private javax.swing.JTextField Port;
    private javax.swing.JCheckBox SHACheckBox;
    private javax.swing.JComboBox ServerCombo;
    private javax.swing.JTextField Username;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    // End of variables declaration//GEN-END:variables
    
}
