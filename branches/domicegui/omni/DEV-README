=================================================================
=================WIDGET NAMING CONVENTIONS=======================
=================================================================

All gui classes have the 'gui_' tag in front of the name of the window.

All of the widgets have the following naming convention:

<widgettype>_<window>_<subpart1>_<subpartN>_ ... <nameOfWidget>[Data]

================================
Example1:

In the host window, the name of the "Battle Name" widget goes as follows:

text_host_server_nameData


Example2:

In the battleroom window, the name of the mod picture in the "Mod" tab is:

bitmap_battleroom_mod_preview
================================

NOTE: In some cases there is no subparts. For complex windows, there may be multiple subparts.

The Data tag on the end indicates that this data is used for something other than display.  The user will enter important information in these fields.  If it is dynamic data like the fields in the Battleroom that individual users are updating themselves, the names have numbers attached to them rather than the Data tag.

In the Lobby, widgets within "notebooks" have numbers attached to them to distinguish between tabs.


=================================================================
===================WIDGET ID CONVENTIONS=========================
=================================================================

Widget ID's are all set up as the following:

101-200 = buttons
201-300 = textboxes
301-400 = checkbox

801-900 = listbox
901-1000 = listview

1001-1100 = menubar items
1101-1200 = popupmenu items

2001-2100 = toolbar items

ID's are only used for toolbar and menubar items as they are a part of the toolbar itself.  There is no way to run ::GetId() on these embedded objects.

=================================================================
=========UDPDATING WORKING FILES FROM PY.GEN=====================
=================================================================

There are special notes where you must be careful when updating the source code in any particular module.  There should be a warning at the beginning of the file, and comments nested around the code that has been modified.  Take note of these when updating the working copies with py.gen code, because code that has been modified in the working module is not the same as the code in py.gen.

Again, I tell you to take great care in updating the working copy.

If you modify code that is generated by wxGlade, make sure you put nested comments around the modified code.  This is just a heads up to other developers who might want to update from the py.gen directory.  Hopefully this can avoid any confusion that may arise from developers stepping on each other's toes.

Known modifications:

- Added conditional icon loading support because Windows can't handle anything other than ICO files
- Wherever images are loaded, os.path.join() is used to produce accurate paths to the files
- Wherever wx.SystemSettings_GetSystemColour() is used, wxGlade generates code that doesn't work with the newest version of WxPy.  The code has been replaced with wx.SystemSettings_GetColour() as a temporary fix.  These changes aren't marked unfortunately.

=================================================================
===================TO BE CONTINUED===============================
=================================================================
