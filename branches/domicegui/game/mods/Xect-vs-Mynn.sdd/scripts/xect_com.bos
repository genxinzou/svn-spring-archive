#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  hip_joint4, hip_joint3, hip_joint2, hip_joint1, torso_joint, head_joint, neck_joint,
       rarm_joint7, rarm_joint6, rarm_joint5, rarm_joint4, rarm_joint3, rarm_joint2, rarm_joint1, larm_joint7,
       larm_joint6, larm_joint5, larm_joint4, larm_joint3, larm_joint2, larm_joint1, rgrip_joint1, rgrip_joint2,
       rleg_joint4, rleg_joint3, rleg_joint2, rleg_joint1, lleg_joint4, lleg_joint3, lleg_joint2, lleg_joint1,
       rflare, lflare, hip4, hip3, hip2, hip1, torso, neck,
       head, shoulders, shoulder_spikes, backpack, rarm7, rarm6, rarm5, rarm4,
       rarm3, rarm2, rarm1, rhand, rgrip1, rgrip2, larm7, larm6,
       larm5, larm4, larm3, larm2, larm1, lhand, pelvis, hips,
       rleg4, rleg3, rleg2, rleg1, lleg4, lleg3, lleg2, lleg1;

static-var  bMoving, bAiming, Static_Var_3, spray, Static_Var_5,
            Static_Var_6, Static_Var_7, Static_Var_8;

// Signal definitions
#define SIG_AIM				4


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from torso;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

relax()
{
	while( TRUE )
	{
		sleep 200;
		if( Static_Var_5 )
		{
			turn larm_joint7 to x-axis <50.> speed <7.>;
			turn rarm_joint7 to x-axis <50.> speed <7.>;
			turn larm_joint7 to y-axis <15.> speed <7.>;
			turn larm_joint6 to y-axis <10.> speed <7.>;
			turn larm_joint5 to y-axis <10.> speed <7.>;
			turn larm_joint4 to y-axis <10.> speed <7.>;
			turn larm_joint3 to y-axis <10.> speed <7.>;
			turn larm_joint2 to y-axis <10.> speed <7.>;
			turn larm_joint1 to y-axis <10.> speed <7.>;
			turn rarm_joint7 to y-axis <-15.> speed <7.>;
			turn rarm_joint6 to y-axis <-10.> speed <7.>;
			turn rarm_joint5 to y-axis <-10.> speed <7.>;
			turn rarm_joint4 to y-axis <-10.> speed <7.>;
			turn rarm_joint3 to y-axis <-10.> speed <7.>;
			turn rarm_joint2 to y-axis <-10.> speed <7.>;
			turn rarm_joint1 to y-axis <-10.> speed <7.>;
			turn torso_joint to x-axis <5.> speed <5.>;
			turn hip_joint3 to x-axis <3.> speed <5.>;
			turn hip_joint2 to x-axis <3.> speed <5.>;
			turn hip_joint1 to x-axis <3.> speed <5.>;
			wait-for-turn larm_joint7 around x-axis;
			wait-for-turn larm_joint7 around y-axis;
			wait-for-turn larm_joint6 around y-axis;
			wait-for-turn larm_joint5 around y-axis;
			wait-for-turn larm_joint4 around y-axis;
			wait-for-turn larm_joint3 around y-axis;
			wait-for-turn larm_joint2 around y-axis;
			wait-for-turn larm_joint1 around y-axis;
			wait-for-turn rarm_joint7 around y-axis;
			wait-for-turn rarm_joint6 around y-axis;
			wait-for-turn rarm_joint5 around y-axis;
			wait-for-turn rarm_joint4 around y-axis;
			wait-for-turn rarm_joint3 around y-axis;
			wait-for-turn rarm_joint2 around y-axis;
			wait-for-turn rarm_joint1 around y-axis;
			wait-for-turn torso_joint around x-axis;
			wait-for-turn hip_joint3 around x-axis;
			wait-for-turn hip_joint2 around x-axis;
			wait-for-turn hip_joint1 around x-axis;
			sleep 200;
			turn larm_joint7 to y-axis <25.> speed <7.>;
			turn larm_joint6 to y-axis <15.> speed <7.>;
			turn larm_joint5 to y-axis <15.> speed <7.>;
			turn larm_joint4 to y-axis <15.> speed <7.>;
			turn larm_joint3 to y-axis <15.> speed <7.>;
			turn larm_joint2 to y-axis <15.> speed <7.>;
			turn larm_joint1 to y-axis <15.> speed <7.>;
			turn rarm_joint7 to y-axis <-25.> speed <7.>;
			turn rarm_joint6 to y-axis <-15.> speed <7.>;
			turn rarm_joint5 to y-axis <-15.> speed <7.>;
			turn rarm_joint4 to y-axis <-15.> speed <7.>;
			turn rarm_joint3 to y-axis <-15.> speed <7.>;
			turn rarm_joint2 to y-axis <-15.> speed <7.>;
			turn rarm_joint1 to y-axis <-15.> speed <7.>;
			turn torso_joint to x-axis <15.> speed <5.>;
			turn hip_joint3 to x-axis <5.> speed <5.>;
			turn hip_joint2 to x-axis <5.> speed <5.>;
			turn hip_joint1 to x-axis <5.> speed <5.>;
			wait-for-turn torso_joint around x-axis;
			wait-for-turn hip_joint3 around x-axis;
			wait-for-turn hip_joint2 around x-axis;
			wait-for-turn hip_joint1 around x-axis;
			wait-for-turn larm_joint7 around x-axis;
			wait-for-turn larm_joint7 around y-axis;
			wait-for-turn larm_joint6 around y-axis;
			wait-for-turn larm_joint5 around y-axis;
			wait-for-turn larm_joint4 around y-axis;
			wait-for-turn larm_joint3 around y-axis;
			wait-for-turn larm_joint2 around y-axis;
			wait-for-turn larm_joint1 around y-axis;
			wait-for-turn rarm_joint7 around y-axis;
			wait-for-turn rarm_joint6 around y-axis;
			wait-for-turn rarm_joint5 around y-axis;
			wait-for-turn rarm_joint4 around y-axis;
			wait-for-turn rarm_joint3 around y-axis;
			wait-for-turn rarm_joint2 around y-axis;
			wait-for-turn rarm_joint1 around y-axis;
		}
	}
}

walk(Func_Var_1)
{
	if( bMoving == 1 )
	{
		turn lleg_joint4 to x-axis <25.> speed <55.>;
		turn lleg_joint3 to x-axis <15.> speed <55.>;
		turn lleg_joint2 to x-axis <15.> speed <55.>;
		turn lleg_joint1 to x-axis <15.> speed <55.>;
		turn torso to z-axis <-5.> speed <25.>;
		turn rleg_joint4 to x-axis <-25.> speed <55.>;
		turn rleg_joint3 to x-axis <-15.> speed <55.>;
		turn rleg_joint2 to x-axis <-15.> speed <55.>;
		turn rleg_joint1 to x-axis <15.> speed <55.>;
		turn torso to z-axis <5.> speed <25.>;
		wait-for-turn lleg_joint1 around x-axis;
		wait-for-turn torso around z-axis;
		wait-for-turn rleg_joint1 around x-axis;
	}
	if( bMoving == 1 )
	{
		turn lleg_joint4 to x-axis <-25.> speed <55.>;
		turn lleg_joint3 to x-axis <-15.> speed <55.>;
		turn lleg_joint2 to x-axis <-15.> speed <55.>;
		turn lleg_joint1 to x-axis <15.> speed <55.>;
		turn torso to z-axis <5.> speed <25.>;
		turn rleg_joint4 to x-axis <25.> speed <55.>;
		turn rleg_joint3 to x-axis <15.> speed <55.>;
		turn rleg_joint2 to x-axis <15.> speed <55.>;
		turn rleg_joint1 to x-axis <15.> speed <55.>;
		turn torso to z-axis <-5.> speed <25.>;
		wait-for-turn lleg_joint1 around x-axis;
		wait-for-turn torso around z-axis;
		wait-for-turn rleg_joint1 around x-axis;
	}
	if( bMoving == 1 )
	{
		turn lleg_joint4 to x-axis <0.> speed <75.>;
		turn lleg_joint3 to x-axis <0.> speed <75.>;
		turn lleg_joint2 to x-axis <0.> speed <75.>;
		turn lleg_joint1 to x-axis <0.> speed <75.>;
		turn torso to z-axis <0.> speed <25.>;
		turn rleg_joint4 to x-axis <0.> speed <75.>;
		turn rleg_joint3 to x-axis <0.> speed <75.>;
		turn rleg_joint2 to x-axis <0.> speed <75.>;
		turn rleg_joint1 to x-axis <0.> speed <75.>;
	}
}

MotionControl(moving, aiming, justmoved)
{
	var Func_Var_4;
	justmoved = TRUE;
	while( TRUE )
	{
		moving = bMoving;
		aiming = bAiming;
		if( moving )
		{
			if( aiming )
			{
				Static_Var_3 = 1;
				Func_Var_4 = 0;
			}
			if( !aiming )
			{
				Static_Var_3 = 0;
				Func_Var_4 = 1;
			}
			Static_Var_5 = 0;
			justmoved = TRUE;
			call-script walk(Func_Var_4);
		}
		if( !moving )
		{
			Static_Var_3 = 1;
			if( justmoved )
			{
				if( !aiming )
				{
					sleep 2000;
					Static_Var_5 = 1;
				}
				if( aiming )
				{
					turn torso_joint to y-axis <0.> speed <50.>;
					turn head_joint to y-axis <0.> speed <185.>;
					turn neck_joint to x-axis <0.> speed <175.>;
					turn pelvis to y-axis <0.> speed <220.>;
					turn lleg_joint4 to x-axis <0.> speed <220.>;
					turn lleg_joint3 to x-axis <0.> speed <220.>;
					turn lleg_joint2 to x-axis <0.> speed <220.>;
					turn lleg_joint1 to x-axis <0.> speed <220.>;
					turn rleg_joint4 to x-axis <0.> speed <220.>;
					turn rleg_joint3 to x-axis <0.> speed <220.>;
					turn rleg_joint2 to x-axis <0.> speed <220.>;
					turn rleg_joint1 to x-axis <0.> speed <220.>;
				}
				justmoved = FALSE;
			}
			sleep 200;
		}
	}
}

Create()
{
	bMoving = FALSE;
	bAiming = FALSE;
	Static_Var_3 = 1;
	start-script SmokeUnit();
	start-script MotionControl();
	dont-cache backpack;
	dont-shade backpack;
	Static_Var_5 = 1;
	start-script relax();
}

StartMoving()
{
	bMoving = TRUE;
}

StopMoving()
{
	bMoving = FALSE;
}

SweetSpot(piecenum)
{
	piecenum = pelvis;
}

RestoreAfterDelay()
{
	sleep 2250;
	turn torso_joint to y-axis <0.> speed <50.>;
	turn head_joint to y-axis <0.> speed <185.>;
	turn neck_joint to x-axis <0.> speed <175.>;
	turn rgrip_joint1 to z-axis <0.> speed <150.>;
	turn rgrip_joint2 to z-axis <0.> speed <150.>;
	turn pelvis to y-axis <0.> speed <220.>;
	turn lleg_joint4 to x-axis <0.> speed <220.>;
	turn lleg_joint3 to x-axis <0.> speed <220.>;
	turn lleg_joint2 to x-axis <0.> speed <220.>;
	turn lleg_joint1 to x-axis <0.> speed <220.>;
	turn rleg_joint4 to x-axis <0.> speed <220.>;
	turn rleg_joint3 to x-axis <0.> speed <220.>;
	turn rleg_joint2 to x-axis <0.> speed <220.>;
	turn rleg_joint1 to x-axis <0.> speed <220.>;
	bAiming = FALSE;
	Static_Var_5 = 1;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	bAiming = TRUE;
	Static_Var_5 = 0;
	while( !Static_Var_3 )
	{
		sleep 100;
	}
	turn torso_joint to y-axis heading speed <80.>;
	turn larm_joint7 to y-axis <0.> speed <150.>;
	turn larm_joint7 to x-axis <0.> speed <150.>;
	turn larm_joint6 to y-axis <15.> speed <120.>;
	turn larm_joint5 to y-axis <15.> speed <120.>;
	turn larm_joint4 to y-axis <15.> speed <120.>;
	turn larm_joint3 to y-axis <15.> speed <120.>;
	turn larm_joint2 to y-axis <15.> speed <120.>;
	turn larm_joint1 to y-axis <15.> speed <120.>;
	wait-for-turn torso_joint around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	sleep 20;
}

AimFromPrimary(piecenum)
{
	piecenum = lflare;
}

QueryPrimary(piecenum)
{
	piecenum = lflare;
}

QueryNanoPiece(piecenum)
{
	piecenum = lflare;
	spray = !spray;
}

StartBuilding(Func_Var_1, Func_Var_2)
{
	bAiming = TRUE;
	turn torso to y-axis Func_Var_1 speed <300.>;
	wait-for-turn torso around y-axis;
	set INBUILDSTANCE to 1;
}

TargetCleared(Func_Var_1)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	call-script RestoreAfterDelay();
}

StopBuilding()
{
	set INBUILDSTANCE to 0;
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	call-script RestoreAfterDelay();
}

FireTertiary()
{
}

AimFromTertiary(piecenum)
{
	piecenum = rhand;
}

QueryTertiary(piecenum)
{
	piecenum = rflare;
}

AimTertiary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	bAiming = TRUE;
	Static_Var_5 = 0;
	while( !Static_Var_3 )
	{
		sleep 100;
	}
	Static_Var_6 = 0 - pitch - 5461;
	turn torso_joint to y-axis heading speed <185.>;
	turn rarm_joint7 to x-axis Static_Var_6 speed <175.>;
	turn neck_joint to x-axis Static_Var_6 speed <175.>;
	turn rarm_joint7 to y-axis <0.> speed <150.>;
	turn rarm_joint7 to x-axis <0.> speed <150.>;
	turn rarm_joint6 to y-axis <-15.> speed <120.>;
	turn rarm_joint5 to y-axis <-15.> speed <120.>;
	turn rarm_joint4 to y-axis <-15.> speed <120.>;
	turn rarm_joint3 to y-axis <-15.> speed <120.>;
	turn rarm_joint2 to y-axis <-15.> speed <120.>;
	turn rarm_joint1 to y-axis <-15.> speed <120.>;
	turn rgrip_joint1 to z-axis <-35.> speed <150.>;
	turn rgrip_joint2 to z-axis <35.> speed <150.>;
	wait-for-turn rgrip_joint2 around z-axis;
	start-script RestoreAfterDelay();
	return (1);
}
