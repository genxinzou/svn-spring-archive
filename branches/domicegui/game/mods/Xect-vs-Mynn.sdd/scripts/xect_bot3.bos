#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, torso, belly, head, stick, dish_joint, dish, beam,
       lleg_joint1, lleg_joint2, lleg_joint3, lleg_joint4, rleg_joint1, rleg_joint2, rleg_joint3, rleg_joint4,
       rleg1, rleg2, rleg3, rleg4, lleg1, lleg2, lleg3, lleg4,
       pack, support, turret_joint, turret, barrels, rgun, lgun, rflare,
       lflare;

static-var  bMoving, bAiming, Static_Var_3, Static_Var_4, gun_1,
            Static_Var_6, Static_Var_7;

// Signal definitions
#define SIG_AIM				4


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from torso;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

relax()
{
	while( TRUE )
	{
		sleep 200;
		if( Static_Var_4 )
		{
			turn lleg_joint4 to x-axis <0.> speed <220.>;
			turn lleg_joint3 to x-axis <0.> speed <220.>;
			turn lleg_joint2 to x-axis <0.> speed <220.>;
			turn lleg_joint1 to x-axis <0.> speed <220.>;
			turn rleg_joint4 to x-axis <0.> speed <220.>;
			turn rleg_joint3 to x-axis <0.> speed <220.>;
			turn rleg_joint2 to x-axis <0.> speed <220.>;
			turn rleg_joint1 to x-axis <0.> speed <220.>;
			turn dish_joint to y-axis <45.> speed <25.>;
			turn turret_joint to x-axis <45.> speed <25.>;
			wait-for-turn turret_joint around x-axis;
			wait-for-turn dish_joint around y-axis;
			sleep 200;
			turn dish_joint to y-axis <-45.> speed <25.>;
			turn turret_joint to x-axis <-45.> speed <25.>;
			wait-for-turn turret_joint around x-axis;
			wait-for-turn dish_joint around y-axis;
		}
	}
}

walk(Func_Var_1)
{
	if( bMoving == 1 )
	{
		turn lleg_joint4 to x-axis <25.> speed <75.>;
		turn lleg_joint3 to x-axis <15.> speed <75.>;
		turn lleg_joint2 to x-axis <15.> speed <75.>;
		turn lleg_joint1 to x-axis <15.> speed <75.>;
		turn torso to z-axis <-5.> speed <25.>;
		turn rleg_joint4 to x-axis <-25.> speed <75.>;
		turn rleg_joint3 to x-axis <-15.> speed <75.>;
		turn rleg_joint2 to x-axis <-15.> speed <75.>;
		turn rleg_joint1 to x-axis <15.> speed <75.>;
		turn torso to z-axis <5.> speed <25.>;
		wait-for-turn lleg_joint1 around x-axis;
		wait-for-turn torso around z-axis;
		wait-for-turn rleg_joint1 around x-axis;
	}
	if( bMoving == 1 )
	{
		turn lleg_joint4 to x-axis <-25.> speed <75.>;
		turn lleg_joint3 to x-axis <-15.> speed <75.>;
		turn lleg_joint2 to x-axis <-15.> speed <75.>;
		turn lleg_joint1 to x-axis <15.> speed <75.>;
		turn torso to z-axis <5.> speed <25.>;
		turn rleg_joint4 to x-axis <25.> speed <75.>;
		turn rleg_joint3 to x-axis <15.> speed <75.>;
		turn rleg_joint2 to x-axis <15.> speed <75.>;
		turn rleg_joint1 to x-axis <15.> speed <75.>;
		turn torso to z-axis <-5.> speed <25.>;
		wait-for-turn lleg_joint1 around x-axis;
		wait-for-turn torso around z-axis;
		wait-for-turn rleg_joint1 around x-axis;
	}
	if( bMoving == 1 )
	{
		turn lleg_joint4 to x-axis <0.> speed <75.>;
		turn lleg_joint3 to x-axis <0.> speed <75.>;
		turn lleg_joint2 to x-axis <0.> speed <75.>;
		turn lleg_joint1 to x-axis <0.> speed <75.>;
		turn torso to z-axis <0.> speed <25.>;
		turn rleg_joint4 to x-axis <0.> speed <75.>;
		turn rleg_joint3 to x-axis <0.> speed <75.>;
		turn rleg_joint2 to x-axis <0.> speed <75.>;
		turn rleg_joint1 to x-axis <0.> speed <75.>;
	}
}

MotionControl(moving, aiming, justmoved)
{
	var Func_Var_4;
	justmoved = TRUE;
	while( TRUE )
	{
		moving = bMoving;
		aiming = bAiming;
		if( moving )
		{
			Static_Var_4 = 0;
			if( aiming )
			{
				Static_Var_3 = 1;
				Func_Var_4 = 0;
			}
			if( !aiming )
			{
				Static_Var_3 = 0;
				Func_Var_4 = 1;
			}
			Static_Var_4 = 0;
			call-script walk(Func_Var_4);
			justmoved = TRUE;
		}
		if( !moving )
		{
			Static_Var_3 = 1;
			if( justmoved )
			{
				Static_Var_4 = !aiming;
				turn lleg_joint4 to x-axis <0.> speed <75.>;
				turn lleg_joint3 to x-axis <0.> speed <75.>;
				turn lleg_joint2 to x-axis <0.> speed <75.>;
				turn lleg_joint1 to x-axis <0.> speed <75.>;
				turn rleg_joint4 to x-axis <0.> speed <75.>;
				turn rleg_joint3 to x-axis <0.> speed <75.>;
				turn rleg_joint2 to x-axis <0.> speed <75.>;
				turn rleg_joint1 to x-axis <0.> speed <75.>;
				justmoved = FALSE;
			}
			sleep 200;
		}
	}
}

Create()
{
	bMoving = FALSE;
	bAiming = FALSE;
	Static_Var_3 = 1;
	gun_1 = base;
	Static_Var_4 = 1;
	start-script SmokeUnit();
	start-script MotionControl();
	dont-cache pack;
	dont-shade pack;
	dont-cache support;
	dont-shade support;
	start-script relax();
}

StartMoving()
{
	bMoving = TRUE;
}

StopMoving()
{
	bMoving = FALSE;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

RestoreAfterDelay()
{
	sleep 2250;
	turn torso to z-axis <0.> speed <220.>;
	gun_1 = base;
	bAiming = FALSE;
	Static_Var_4 = 1;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	bAiming = TRUE;
	Static_Var_4 = 0;
	while( !Static_Var_3 )
	{
		sleep 100;
	}
	turn turret_joint to x-axis <0.> - pitch speed <240.>;
	turn turret_joint to y-axis heading speed <240.>;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( gun_1 == 0 )
	{
		move rgun to y-axis [-3.] speed [235.];
		wait-for-move rgun along y-axis;
		move rgun to y-axis [0.] speed [215.];
		gun_1 = torso;
		return (0);
	}
	if( gun_1 == 1 )
	{
		move lgun to y-axis [-3.] speed [235.];
		wait-for-move lgun along y-axis;
		move lgun to y-axis [0.] speed [215.];
		gun_1 = base;
		return (0);
	}
}

AimFromPrimary(piecenum)
{
	piecenum = barrels;
}

QueryPrimary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = rflare;
	}
	if( gun_1 == 1 )
	{
		piecenum = lflare;
	}
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode torso type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode torso type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode torso type BITMAPONLY | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode torso type BITMAPONLY | BITMAP1;
	return (0);
}
