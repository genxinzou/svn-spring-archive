//  script generated by Marcosoft LazyScripter
//   by Marco for Quantum Design - www.annihilated.com/quantum

piece base, body, frontturret, frontturretbarrel,  frontturretflare, backturret, backturretbarrel, backturretflare, rightturret, rightturretbarrel,rightturretflare, leftturret, leftturretbarrel, leftturretflare, leftturrettwo, leftturrettwobarrel, leftturretflaretwo, rightturrettwo, rightturrettwobarrel,rightturretflaretwo;

static-var restore_delay;
#define	SIG_AIM1	2
#define	SIG_AIM2	4
#define	SIG_AIM3	8
#define	SIG_AIM4	16
#define	SIG_AIM5	32
#define	SIG_AIM6	64
#define SMOKEPIECE1 base
#include "smokeunit.h"
#include "exptype.h"
#include "rockunit.h"
#include "hitweap.h"


Create()
	{
	restore_delay = 2000;
	start-script SmokeUnit();
	}

SetMaxReloadTime(time)
	{
	restore_delay = time * 2;
	}

RestoreAfterDelay()
	{
	// Add code to reset turret(s) to normal position
	turn frontturret to y-axis <0> speed <50>;
	turn frontturretbarrel to x-axis <0> speed <50>; 
	turn backturret to y-axis <0> speed <50>;
	turn backturretbarrel to x-axis <0> speed <50>; 
	turn rightturret to y-axis <0> speed <50>;
	turn rightturretbarrel to x-axis <0> speed <50>; 
	turn leftturret to y-axis <0> speed <50>;
	turn leftturretbarrel to x-axis <0> speed <50>; 
	turn rightturrettwo to y-axis <0> speed <50>;
	turn rightturrettwobarrel to x-axis <0> speed <50>; 
	turn leftturrettwo to y-axis <0> speed <50>;
	turn leftturrettwobarrel to x-axis <0> speed <50>; 
	sleep restore_delay;
	return 0;
	}

SweetSpot(piecenum)
	{
	piecenum = base;
	}

QueryWeapon1(piecenum)
	{
	piecenum = frontturretflare;
	}

AimFromWeapon1(piecenum)
	{
	piecenum = frontturret;
	}

AimWeapon1(heading, pitch)
	{
	signal SIG_AIM1;
	set-signal-mask SIG_AIM1;
	//   Place aiming animation code here
//	turn frontturret to y-axis heading speed <50>;
	turn frontturretbarrel to x-axis (<0>-pitch) speed <50>;
//	wait-for-turn frontturret around y-axis;
	wait-for-turn frontturretbarrel around x-axis;
	start-script RestoreAfterDelay();
	return(1);
	}

FireWeapon1()
	{
	show frontturretflare;
	sleep 150;
	hide frontturretflare;
	return(0);
	}

QueryWeapon2(piecenum)
	{
	piecenum = backturretflare;
	}

AimFromWeapon2(piecenum)
	{
	piecenum = backturret;
	}

AimWeapon2(heading, pitch)
	{
	signal SIG_AIM2;
	set-signal-mask SIG_AIM2;
	//   Place aiming animation code here
	turn backturret to y-axis heading speed <50>;
//	turn backturretbarrel to x-axis (<0>-pitch) speed <50>;
	wait-for-turn backturret around y-axis;
//	wait-for-turn backturretbarrel around x-axis;
	start-script RestoreAfterDelay();
	return(1);
	}

FireWeapon2()
	{
	show backturretflare;
	sleep 150;
	hide backturretflare;
	return(0);
	}

QueryWeapon3(piecenum)
	{
	piecenum = rightturretflare;
	}

AimFromWeapon3(piecenum)
	{
	piecenum = rightturret;
	}

AimWeapon3(heading, pitch)
	{
	signal SIG_AIM3;
	set-signal-mask SIG_AIM3;
	//   Place aiming animation code here
//	turn rightturret to y-axis heading speed <50>;
//	turn rightturretbarrel to x-axis (<0>-pitch) speed <50>;
//	wait-for-turn rightturret around y-axis;
//	wait-for-turn rightturretbarrel around x-axis;
	start-script RestoreAfterDelay();
	return(1);
	}

FireWeapon3()
	{
	show rightturretflare;
	sleep 150;
	hide rightturretflare;
	return(0);
	}

QueryWeapon4(piecenum)
	{
	piecenum = leftturretflare;
	}

AimFromWeapon4(piecenum)
	{
	piecenum = leftturret;
	}

AimWeapon4(heading, pitch)
	{
	signal SIG_AIM4;
	set-signal-mask SIG_AIM4;
	//   Place aiming animation code here
	turn leftturret to y-axis heading speed <50>;
	turn leftturretbarrel to x-axis (<0>-pitch) speed <50>;
	wait-for-turn leftturret around y-axis;
	wait-for-turn leftturretbarrel around x-axis;
	start-script RestoreAfterDelay();
	return(1);
	}

FireWeapon4()
	{
	show leftturretflare;
	sleep 150;
	hide leftturretflare;
	return(0);
	}

QueryWeapon5(piecenum)
	{
	piecenum = rightturretflaretwo;
	}

AimFromWeapon5(piecenum)
	{
	piecenum = rightturrettwo;
	}

AimWeapon5(heading, pitch)
	{
	signal SIG_AIM5;
	set-signal-mask SIG_AIM5;
	//   Place aiming animation code here
	turn rightturrettwo to y-axis heading speed <50>;
	turn rightturrettwobarrel to x-axis (<0>-pitch) speed <50>;
	wait-for-turn rightturrettwo around y-axis;
	wait-for-turn rightturrettwobarrel around x-axis;
	start-script RestoreAfterDelay();	
	return(1);
	}

FireWeapon5()
	{
	show rightturretflaretwo;
	sleep 150;
	hide rightturretflaretwo;
	return(0);
	}

QueryWeapon6(piecenum)
	{
	piecenum = leftturretflaretwo;
	}

AimFromWeapon6(piecenum)
	{
	piecenum = leftturrettwo;
	}

AimWeapon6(heading, pitch)
	{
	signal SIG_AIM6;
	set-signal-mask SIG_AIM6;
	//   Place aiming animation code here
	turn leftturrettwo to y-axis heading speed <50>;
	turn leftturrettwobarrel to x-axis (<0>-pitch) speed <50>;
	wait-for-turn leftturrettwo around y-axis;
	wait-for-turn leftturrettwobarrel around x-axis;
	start-script RestoreAfterDelay();
	return(1);
	}

FireWeapon6()
	{
	show leftturretflaretwo;
	sleep 150;
	hide leftturretflaretwo;
	return(0);
	}

Killed(severity, corpsetype)
	{
	if (severity <= 25)
		{
		corpsetype = 1;
		explode base type	BITMAPONLY | BITMAP1;
		explode body type	BITMAPONLY | BITMAP1;
		explode frontturret type	BITMAPONLY | BITMAP1;
		explode frontturretflare type	BITMAPONLY | BITMAP1;
		explode backturret type	BITMAPONLY | BITMAP1;
		explode backturretflare type	BITMAPONLY | BITMAP1;
		explode rightturret type	BITMAPONLY | BITMAP1;
		explode rightturretflare type	BITMAPONLY | BITMAP1;
		explode leftturret type	BITMAPONLY | BITMAP1;
		explode leftturretflare type	BITMAPONLY | BITMAP1;
		explode leftturrettwo type	BITMAPONLY | BITMAP1;
		explode leftturretflaretwo type	BITMAPONLY | BITMAP1;
		explode rightturrettwo type	BITMAPONLY | BITMAP1;
		explode rightturretflaretwo type	BITMAPONLY | BITMAP1;
		return(0);
		}
	if (severity <= 50)
		{
		corpsetype = 2;
		explode base type	SHATTER | BITMAP4;
		explode body type	SHATTER | BITMAP4;
		explode frontturret type	SHATTER | BITMAP4;
		explode frontturretflare type	SHATTER | BITMAP4;
		explode backturret type	SHATTER | BITMAP4;
		explode backturretflare type	SHATTER | BITMAP4;
		explode rightturret type	SHATTER | BITMAP4;
		explode rightturretflare type	SHATTER | BITMAP4;
		explode leftturret type	SHATTER | BITMAP4;
		explode leftturretflare type	SHATTER | BITMAP4;
		explode leftturrettwo type	SHATTER | BITMAP4;
		explode leftturretflaretwo type	SHATTER | BITMAP4;
		explode rightturrettwo type	SHATTER | BITMAP4;
		explode rightturretflaretwo type	SHATTER | BITMAP4;
		return(0);
		}
	if (severity <= 99)
		{
		corpsetype = 3;
		explode base type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode body type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode frontturret type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode frontturretflare type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode backturret type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode backturretflare type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rightturret type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rightturretflare type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode leftturret type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode leftturretflare type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode leftturrettwo type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode leftturretflaretwo type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rightturrettwo type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rightturretflaretwo type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		return(0);
		}
	corpsetype = 3;
	explode base type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode body type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode frontturret type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode frontturretflare type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode backturret type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode backturretflare type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rightturret type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rightturretflare type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode leftturret type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode leftturretflare type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode leftturrettwo type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode leftturretflaretwo type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rightturrettwo type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rightturretflaretwo type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	return(0);
	}