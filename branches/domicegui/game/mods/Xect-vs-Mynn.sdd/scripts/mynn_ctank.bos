#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, spray1, frame, rod, lhinge, rhinge, rflap,
       lflap, spray2, rthigh1, rthigh2, rthigh3, lthigh1, lthigh2, lthigh3, turret;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4, Static_Var_5;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	var Func_Var_4;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			Func_Var_4 = Rand( 1, 2 );
						if( Func_Var_4 == 1 )
			{
	//			emit-sfx smoketype from spray1;
			}
			if( Func_Var_4 == 2 )
			{
	//			emit-sfx smoketype from spray2;
			}
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

Walk()
{
	if( TRUE )
	{
		wait-for-turn lthigh3 around y-axis;
		turn rthigh1 to y-axis <1.> speed <1.>;
		turn rthigh2 to y-axis <-1.> speed <1.>;
		turn rthigh3 to y-axis <1.> speed <1.>;
		turn lthigh1 to y-axis <-1.> speed <1.>;
		turn lthigh2 to y-axis <1.> speed <1.>;
		turn lthigh3 to y-axis <-1.> speed <1.>;
		sleep 185;
		if( TRUE )
		{
			wait-for-turn lthigh3 around y-axis;
			turn rthigh1 to y-axis <-1.> speed <1.>;
			turn rthigh2 to y-axis <1.> speed <1.>;
			turn rthigh3 to y-axis <-1.> speed <1.>;
			turn lthigh1 to y-axis <1.> speed <1.>;
			turn lthigh2 to y-axis <-1.> speed <1.>;
			turn lthigh3 to y-axis <1.> speed <1.>;
			sleep 100;
			return (0);
		}
	}
}

MotionControl(moving, aiming, justmoved)
{
	justmoved = TRUE;
	while( TRUE )
	{
		moving = Static_Var_2;
		aiming = Static_Var_3;
		if( moving )
		{
			if( aiming )
			{
				Static_Var_4 = 1;
				call-script Walk();
			}
			if( !aiming )
			{
				Static_Var_4 = 0;
				call-script Walk();
			}
			justmoved = TRUE;
		}
		if( !moving )
		{
			Static_Var_4 = 1;
			if( justmoved )
			{
				move frame to y-axis [-1.] speed [1.];
				turn rthigh1 to y-axis <-1.> speed <1.>;
				turn rthigh2 to y-axis <-1.> speed <1.>;
				turn rthigh3 to y-axis <-1.> speed <1.>;
				turn lthigh1 to y-axis <-1.> speed <1.>;
				turn lthigh2 to y-axis <-1.> speed <1.>;
				turn lthigh3 to y-axis <-1.> speed <1.>;
				if( !aiming )
				{
					turn turret to y-axis <-1.> speed <1.>;
				}
				justmoved = FALSE;
			}
			sleep 100;
		}
	}
}

Create()
{
	Static_Var_2 = 0;
	Static_Var_3 = 0;
	Static_Var_4 = 1;
	start-script SmokeUnit();
	start-script MotionControl();
	Static_Var_1 = 0;
	Static_Var_5 = 0;
	dont-cache rflap;
	dont-cache lflap;
	dont-cache frame;
}

RestoreAfterDelay()
{
	turn lhinge to z-axis <-1.> speed <1.>;
	turn rhinge to z-axis <-1.> speed <1.>;
	turn rod to y-axis <-1.> speed <1.>;
	turn rod to x-axis <-1.> speed <1.>;
	move rod to y-axis [-1.] speed [1.];
	Static_Var_3 = 0;
	set INBUILDSTANCE to 0;
}


StartBuilding(Func_Var_1, Func_Var_2)
{
	call-script RestoreAfterDelay();
	Static_Var_3 = 1;
	while( !Static_Var_4 )
	{
		sleep 100;
	}
	turn lhinge to z-axis <-1.> speed <1.>;
	turn rhinge to z-axis <1.> speed <1.>;
	wait-for-turn rhinge around x-axis;
	move rod to y-axis [1.] speed [1.];
	wait-for-move rod along y-axis;
	turn rod to y-axis Func_Var_1 speed <1.>;
	wait-for-turn rod around y-axis;
	set INBUILDSTANCE to 1;
}


Activate()
{
	start-script StartBuilding();
}

StopBuilding()
{
	set INBUILDSTANCE to 0;
	signal 4;
	set-signal-mask 4;
	Static_Var_3 = 0;
	call-script RestoreAfterDelay();
}


Deactivate()
{
	start-script StopBuilding();
}

StartMoving()
{
	Static_Var_2 = 1;
}

StopMoving()
{
	Static_Var_2 = 0;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

QueryNanoPiece(piecenum)
{
	piecenum = spray1;
	Static_Var_5 = !Static_Var_5;
}


TargetCleared(Func_Var_1)
{
	signal 4;
	set-signal-mask 4;
	call-script RestoreAfterDelay();
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode frame type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode frame type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode frame type BITMAPONLY | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode frame type BITMAPONLY | BITMAP1;
}
