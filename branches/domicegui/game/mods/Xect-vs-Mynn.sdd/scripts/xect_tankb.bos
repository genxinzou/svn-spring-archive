#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, turret_joint, turret_joint2, turret, turret_tube, turret_ears, barrel,
       flare, treads;

static-var  restore_delay;

// Signal definitions
#define SIG_AIM				2


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

RockUnit(anglex, anglez)
{
	turn base to x-axis anglex speed <50.>;
	turn base to z-axis anglez speed <50.>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.> speed <20.>;
	turn base to x-axis <0.> speed <20.>;
}

HitByWeapon(Func_Var_1, Func_Var_2)
{
	turn base to z-axis Func_Var_2 speed <50.>;
	turn base to x-axis Func_Var_1 speed <50.>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.> speed <20.>;
	turn base to x-axis <0.> speed <20.>;
}

Create()
{
	restore_delay = 3000;
	start-script SmokeUnit();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn turret_joint to y-axis <0.> speed <90.>;
	turn turret_joint2 to x-axis <0.> speed <90.>;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret_joint to y-axis heading speed <90.>;
	turn turret_joint2 to x-axis <0.> - pitch speed <50.>;
	wait-for-turn turret_joint around y-axis;
	wait-for-turn turret_joint2 around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	show flare;
	move barrel to z-axis [-2.] speed [500.];
	sleep 150;
	hide flare;
	wait-for-move barrel along z-axis;
	move barrel to z-axis [0.] speed [3.];
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide flare;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode barrel type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode turret type BITMAPONLY | BITMAP4;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode barrel type FALL | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode turret type SHATTER | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode turret type SHATTER | BITMAP4;
		return (0);
	}
	corpsetype = 3;
	explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode base type BITMAPONLY | BITMAP2;
	explode turret type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	return (0);
}
