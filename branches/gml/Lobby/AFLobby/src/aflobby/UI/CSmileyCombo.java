/*
 * NewBeanForm.java
 *
 * Created on 29 September 2007, 14:23
 */

package aflobby.UI;

import aflobby.*;
import java.awt.Component;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JTextArea;
import javax.swing.ListCellRenderer;

/**
 *
 * @author  AF-StandardUsr
 */
public class CSmileyCombo extends JComboBox {
    private JTextArea input = null;
    /** Creates new form BeanForm */
    public CSmileyCombo() {
        initComponents();
    }
    
    /**
     * 
     * @param j 
     */
    public void Init(JTextArea j){
        if(CSmileyManager.loaded==false){
            CSmileyManager.Init();
        }
        input = j;
        setModel(new DefaultComboBoxModel(CSmileyManager.intArray));
    }
    
    class SmileyComboBoxRenderer extends JLabel implements ListCellRenderer {

        public SmileyComboBoxRenderer() {
            setOpaque(true);
            setHorizontalAlignment(LEFT);
            setVerticalAlignment(TOP);
        }

        /*
         * This method finds the image and text corresponding
         * to the selected value and returns the label, set up
         * to display the text and image.
         */
        public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
            //Get the selected index. (The index param isn't
            //always valid, so just use the value.)
            int selectedIndex;
            try{
                selectedIndex = Integer.valueOf(value.toString()).intValue();
            }catch(NumberFormatException e){
                return this;
            }

            /*if (isSelected) {
            setBackground(list.getSelectionBackground());
            setForeground(list.getSelectionForeground());
            } else {
            setBackground(list.getBackground());
            setForeground(list.getForeground());
            }*/
            this.setOpaque(false);

            //Set the icon and text.  If icon was null, say so.
            ImageIcon icon = CSmileyManager.small_smiley_images[selectedIndex];
            String pet = CSmileyManager.smileys[selectedIndex];
            setIcon(icon);
            if (icon != null) {
                icon.setImageObserver(list);
                setText(pet);
                setFont(list.getFont());
            } // else {
            //    setUhOhText (pet + " (no image available)",
            //        list.getFont ());
            //}
            return this;
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setRenderer(new SmileyComboBoxRenderer());
        addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                formActionPerformed(evt);
            }
        });
    }// </editor-fold>//GEN-END:initComponents

    private void formActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_formActionPerformed
        int i = getSelectedIndex();
        String o = CSmileyManager.smileys[i];
        int c = input.getCaretPosition();
        input.insert(":" + o + ":", c);
        input.requestFocus();
    }//GEN-LAST:event_formActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    
}
